/**
 * @fileoverview Tests for Configuration TanStack Query hooks
 * @module features/Configuration/hooks/__tests__/useConfiguration.test
 */

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { renderHook, act } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { ReactNode } from 'react';
import {
  useConfigurations,
  useConfiguration,
  useCreateConfiguration,
} from '@features/Configuration/hooks/useConfiguration';
import { createMockQueryData } from '@/lib/test-utils-query';
import type { Configuration } from '@features/Configuration/domain/schemas/ConfigurationSchemas';

// Mock the client logger
vi.mock('@/lib/logger.client', () => ({
  default: {
    info: vi.fn(),
    warn: vi.fn(),
    error: vi.fn(),
    debug: vi.fn(),
  },
}));

// Helper to create test query client
function createTestQueryClient() {
  return new QueryClient({
    defaultOptions: {
      queries: {
        retry: false,
        gcTime: 0,
        staleTime: 0,
      },
      mutations: {
        retry: false,
      },
    },
    logger: {
      log: vi.fn(),
      warn: vi.fn(),
      error: vi.fn(),
    },
  });
}

// Helper wrapper component
function TestWrapper({ children, queryClient }: { children: ReactNode; queryClient: QueryClient }) {
  return (
    <QueryClientProvider client={queryClient}>
      {children}
    </QueryClientProvider>
  );
}

/**
 * Test suite for Configuration TanStack Query hooks
 * 
 * Tests query and mutation functionality including optimistic updates,
 * cache invalidation, and error handling.
 */
describe('Configuration Query Hooks', () => {
  const mockConfiguration = createMockQueryData.configuration();
  const mockConfigurations = [mockConfiguration];
  const mockConfigurationForm = createMockQueryData.configurationForm();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  afterEach(() => {
    vi.restoreAllMocks();
  });

  describe('useConfigurations', () => {
    /**
     * Tests successful configurations fetch
     */
    it('should fetch configurations successfully', () => {
      const queryClient = createTestQueryClient();

      // Set mock data in cache using the correct key structure
      queryClient.setQueryData(['configurations'], mockConfigurations);

      const { result } = renderHook(() => useConfigurations(), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Check data
      expect(result.current.data).toEqual(mockConfigurations);
      expect(result.current.isLoading).toBe(false);
      expect(result.current.isError).toBe(false);
    });

    /**
     * Tests that hook initializes with loading state
     */
    it('should initialize with loading state', () => {
      const queryClient = createTestQueryClient();

      const { result } = renderHook(() => useConfigurations(), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Initially loading (no data in cache)
      expect(result.current.isLoading).toBe(true);
      expect(result.current.data).toBeUndefined();
      expect(result.current.isError).toBe(false);
    });
  });

  describe('useConfiguration', () => {
    /**
     * Tests successful single configuration fetch
     */
    it('should fetch single configuration successfully', () => {
      const configId = 'test-config-1';
      const queryClient = createTestQueryClient();

      // Set mock data in cache using the correct key structure
      queryClient.setQueryData(['configurations', 'detail', configId], mockConfiguration);

      const { result } = renderHook(() => useConfiguration(configId), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Check data
      expect(result.current.data).toEqual(mockConfiguration);
    });

    /**
     * Tests that query is disabled when ID is empty
     */
    it('should be disabled when id is empty', () => {
      const queryClient = createTestQueryClient();

      const { result } = renderHook(() => useConfiguration(''), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Should not fetch when ID is empty
      expect(result.current.fetchStatus).toBe('idle');
    });
  });

  describe('useCreateConfiguration', () => {
    /**
     * Tests successful configuration creation setup
     */
    it('should create configuration mutation successfully', () => {
      const queryClient = createTestQueryClient();

      const { result } = renderHook(() => useCreateConfiguration(), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Initially should be idle
      expect(result.current.isPending).toBe(false);
      expect(result.current.isSuccess).toBe(false);
      expect(result.current.isError).toBe(false);
    });

    /**
     * Tests optimistic updates during creation
     */
    it('should apply optimistic updates during creation', async () => {
      const queryClient = createTestQueryClient();

      // Set initial empty list
      queryClient.setQueryData(['configurations'], []);

      const { result } = renderHook(() => useCreateConfiguration(), {
        wrapper: ({ children }) => <TestWrapper queryClient={queryClient}>{children}</TestWrapper>,
      });

      // Start mutation to trigger optimistic update
      await act(async () => {
        result.current.mutate(mockConfigurationForm);
        // Give the mutation's onMutate a chance to run
        await new Promise(resolve => setTimeout(resolve, 0));
      });

      // Check that optimistic update was applied
      const cachedData = queryClient.getQueryData(['configurations']);
      expect(cachedData).toBeDefined();
      if (Array.isArray(cachedData)) {
        expect(cachedData).toHaveLength(1);
        expect(cachedData[0].name).toBe('Creating...');
      } else {
        throw new Error('Expected cachedData to be an array');
      }
    });
  });

  describe('Query Management', () => {
    /**
     * Tests basic query client functionality
     */
    it('should manage query cache correctly', () => {
      const queryClient = createTestQueryClient();

      // Test setting and getting data
      queryClient.setQueryData(['test'], 'test-data');
      const data = queryClient.getQueryData(['test']);
      
      expect(data).toBe('test-data');
    });
  });
});